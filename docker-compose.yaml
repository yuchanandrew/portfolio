services:
  traefik:
    image: traefik:3.5.0
    command:
      - "--configFile=/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - TZ=UTC
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_KEY}
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"
    restart: unless-stopped
    networks:
      - traefik_network
  
  backend:
    build: ./server
    env_file: ./server/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api2.andrewrho.dev`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"

      # Tell Traefik which network traffic should be directed on
      - "traefik.docker.network=traefik_network"

      # Add cors middleware
      - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=https://www2.andrewrho.dev"
      - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true"
      - "traefik.http.routers.backend.middlewares=cors@docker"
    depends_on: # Run if db is in good condition
      db:
        condition: service_healthy
    networks: # Allow backend and db to communicate securely
      - mysql_network
      - traefik_network
  
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`www2.andrewrho.dev`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - traefik_network
  
  db: # Added new service for database
    image: mysql:8.0 # The image that docker should use to initialize
    restart: always
    ports:
      - "3306:3306" # Connect to port 3306
    env_file: # Import environment variables from .env file at root
      - .env
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init:/docker-entrypoint-initdb.d
    networks: # Access the secure mysql_network
      - mysql_network
    healthcheck: # Prevent early connection failure
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  mysql_data:
  letsencrypt:

networks:
  mysql_network:
  traefik_network: